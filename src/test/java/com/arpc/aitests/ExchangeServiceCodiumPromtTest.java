// Generated by CodiumAI

import org.junit.Test;

import javax.money.CurrencyUnit;
import javax.money.Monetary;
import javax.money.convert.ExchangeRate;

public class ExchangeServiceTest {


    // Can retrieve exchange rate for valid source and target currency
    @Test
    public void shouldRetrieveExchangeRateForValidSourceAndTargetCurrency() {
        // Arrange
        CurrencyUnit sourceCurrency = Monetary.getCurrency("USD");
        CurrencyUnit targetCurrency = Monetary.getCurrency("EUR");
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isPresent();
    }

    // Returns empty optional for invalid currency codes
    @Test
    public void shouldReturnEmptyOptionalForInvalidCurrencyCodes() {
        // Arrange
        String sourceCurrency = "INVALID";
        String targetCurrency = "EUR";
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isEmpty();
    }

    // Can retrieve exchange rate for same source and target currency
    @Test
    public void shouldRetrieveExchangeRateForSameSourceAndTargetCurrency() {
        // Arrange
        CurrencyUnit currency = Monetary.getCurrency("USD");
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(currency, currency);
    
        // Assert
        assertThat(exchangeRate).isPresent();
    }

    // Can retrieve exchange rate for different source and target currency
    @Test
    public void shouldRetrieveExchangeRateForDifferentSourceAndTargetCurrency() {
        // Arrange
        CurrencyUnit sourceCurrency = Monetary.getCurrency("USD");
        CurrencyUnit targetCurrency = Monetary.getCurrency("EUR");
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isPresent();
    }

    // Returns empty optional for unsupported currency codes
    @Test
    public void shouldReturnEmptyOptionalForUnsupportedCurrencyCodes() {
        // Arrange
        String sourceCurrency = "USD";
        String targetCurrency = "UNSUPPORTED";
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isEmpty();
    }

    // Returns empty optional for null source and target currency codes
    @Test
    public void shouldReturnEmptyOptionalForNullSourceAndTargetCurrencyCodes() {
        // Arrange
        String sourceCurrency = null;
        String targetCurrency = null;
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isEmpty();
    }

    // Returns empty optional for empty source and target currency codes
    @Test
    public void shouldReturnEmptyOptionalForEmptySourceAndTargetCurrencyCodes() {
        // Arrange
        String sourceCurrency = "";
        String targetCurrency = "";
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isEmpty();
    }

    // Returns empty optional for non-existent source and target currency codes
    @Test
    public void shouldReturnEmptyOptionalForNonExistentSourceAndTargetCurrencyCodes() {
        // Arrange
        String sourceCurrency = "NON_EXISTENT";
        String targetCurrency = "EUR";
    
        // Act
        Optional<ExchangeRate> exchangeRate = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);
    
        // Assert
        assertThat(exchangeRate).isEmpty();
    }

}