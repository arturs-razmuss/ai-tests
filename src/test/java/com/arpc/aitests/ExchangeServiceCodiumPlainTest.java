// Generated by CodiumAI

import org.junit.Test;

import javax.money.CurrencyUnit;
import javax.money.Monetary;
import javax.money.MonetaryException;
import javax.money.UnknownCurrencyException;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import java.util.Optional;

public class ExchangeServiceTest {


    // Can retrieve exchange rate for valid source and target currency
    @Test
    public void test_retrieve_exchange_rate_valid_currency() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit sourceCurrency = Monetary.getCurrency("USD");
        CurrencyUnit targetCurrency = Monetary.getCurrency("EUR");
        ExchangeRate exchangeRate = mock(ExchangeRate.class);
        given(provider.getExchangeRate(sourceCurrency, targetCurrency)).willReturn(exchangeRate);

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isPresent();
        assertThat(result.get()).isEqualTo(exchangeRate);
    }

    // Returns empty optional for invalid currency codes
    @Test
    public void test_returns_empty_optional_invalid_currency_codes() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        String sourceCurrency = "INVALID";
        String targetCurrency = "EUR";
        given(Monetary.getCurrency(sourceCurrency)).willThrow(UnknownCurrencyException.class);

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isEmpty();
    }

    // Can retrieve exchange rate for same source and target currency
    @Test
    public void test_retrieve_exchange_rate_same_currency() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit currency = Monetary.getCurrency("USD");
        ExchangeRate exchangeRate = mock(ExchangeRate.class);
        given(provider.getExchangeRate(currency, currency)).willReturn(exchangeRate);

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(currency, currency);

        // Then
        assertThat(result).isPresent();
        assertThat(result.get()).isEqualTo(exchangeRate);
    }

    // Can retrieve exchange rate for different source and target currency
    @Test
    public void test_retrieve_exchange_rate_different_currency() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit sourceCurrency = Monetary.getCurrency("USD");
        CurrencyUnit targetCurrency = Monetary.getCurrency("EUR");
        ExchangeRate exchangeRate = mock(ExchangeRate.class);
        given(provider.getExchangeRate(sourceCurrency, targetCurrency)).willReturn(exchangeRate);

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isPresent();
        assertThat(result.get()).isEqualTo(exchangeRate);
    }

    // Returns empty optional for unsupported currency codes
    @Test
    public void test_returns_empty_optional_unsupported_currency_codes() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit sourceCurrency = Monetary.getCurrency("USD");
        CurrencyUnit targetCurrency = Monetary.getCurrency("UNSUPPORTED");
        given(provider.getExchangeRate(sourceCurrency, targetCurrency)).willThrow(MonetaryException.class);

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isEmpty();
    }

    // Returns empty optional for null source and target currency codes
    @Test
    public void test_returns_empty_optional_null_currency_codes() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit sourceCurrency = null;
        CurrencyUnit targetCurrency = null;

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isEmpty();
    }

    // Returns empty optional for empty source and target currency codes
    @Test
    public void test_returns_empty_optional_empty_currency_codes() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit sourceCurrency = Monetary.getCurrency("");
        CurrencyUnit targetCurrency = Monetary.getCurrency("");

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isEmpty();
    }

    // Returns empty optional for non-existent source and target currency codes
    @Test
    public void test_returns_empty_optional_nonexistent_currency_codes() {
        // Given
        ExchangeRateProvider provider = mock(ExchangeRateProvider.class);
        ExchangeService exchangeService = new ExchangeService(provider);
        CurrencyUnit sourceCurrency = Monetary.getCurrency("NONEXISTENT");
        CurrencyUnit targetCurrency = Monetary.getCurrency("NONEXISTENT");

        // When
        Optional<ExchangeRate> result = exchangeService.getExchangeRate(sourceCurrency, targetCurrency);

        // Then
        assertThat(result).isEmpty();
    }

}